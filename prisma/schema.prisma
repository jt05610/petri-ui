datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  NONE
  ADMIN
  DEVELOPER
  REVIERWER
  USER
}

enum Visibility {
  NONE
  PUBLIC
  PRIVATE
}

model Parameter {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expression String
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  Device     Device?  @relation(fields: [deviceId], references: [id])
  deviceId   String?
  Run        Run?     @relation(fields: [runId], references: [id])
  runId      String?
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  role       UserRole
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  parameters Parameter[]
  password   Password?
  nets       Net[]
  devices    Device[]
  instances  Instance[]
  sessions   Session[]
  Sample     Sample[]
  runs       Run[]
  sharedNets SharedNet[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

// A Net is a Petri Net. It is a directed graph consisting of places, transitions, and arcs.
model Net {
  id                   String                @id @default(cuid())
  name                 String
  description          String
  visibility           Visibility            @default(PRIVATE)
  initialMarking       Int[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  author               User                  @relation(fields: [authorID], references: [id])
  authorID             String
  arcs                 Arc[]
  places               Place[]
  transitions          Transition[]
  parent               Net?                  @relation("NetChildren", fields: [parentID], references: [id])
  parentID             String?
  children             Net[]                 @relation("NetChildren")
  devices              DevicesOnNets[]
  placeInterfaces      PlaceInterface[]
  transitionInterfaces TransitionInterface[]
  runs                 Run[]
  sharedWith           SharedNet[]
}

model SharedNet {
  id        String   @id @default(cuid())
  net       Net      @relation(fields: [netID], references: [id])
  netID     String
  user      User     @relation(fields: [userID], references: [id])
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// PlaceInterface is a place that connect
model PlaceInterface {
  id        String   @id @default(cuid())
  name      String
  net       Net      @relation(fields: [netID], references: [id])
  bound     Int
  netID     String
  places    Place[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransitionInterface {
  id          String       @id @default(cuid())
  name        String
  net         Net          @relation(fields: [netID], references: [id])
  events      Event[]
  netID       String
  transitions Transition[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Place {
  id          String           @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  arcs        Arc[]
  bound       Int
  nets        Net[]
  interfaces  PlaceInterface[]
}

model Transition {
  id          String                @id @default(cuid())
  condition   String?
  description String?
  name        String
  arcs        Arc[]
  events      Event[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  nets        Net[]
  interfaces  TransitionInterface[]
}

model Arc {
  id           String     @id @default(cuid())
  net          Net        @relation(fields: [netID], references: [id])
  netID        String
  fromPlace    Boolean
  place        Place      @relation(fields: [placeID], references: [id])
  placeID      String
  transition   Transition @relation(fields: [transitionID], references: [id])
  transitionID String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model DevicesOnNets {
  device   Device @relation(fields: [deviceID], references: [id])
  deviceID String
  net      Net    @relation(fields: [netID], references: [id])
  netID    String

  @@id([deviceID, netID])
}

model Field {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        String
  min         String?
  max         String?
  choices     String[]
  unit        String?
  condition   String?
  event       Event      @relation(fields: [eventID], references: [id])
  eventID     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  constants   Constant[]
}

model Event {
  id                    String               @id @default(cuid())
  name                  String
  description           String?
  transitions           Transition[]
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  fields                Field[]
  commands              Action[]
  data                  Datum[]
  placeInterfaceId      String?
  transitionInterface   TransitionInterface? @relation(fields: [transitionInterfaceId], references: [id])
  transitionInterfaceId String?
}

enum Language {
  NONE
  CPP
  GO
  JS
  PYTHON
}

model Instance {
  id        String    @id @default(cuid())
  author    User      @relation(fields: [authorID], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorID  String
  language  Language
  name      String
  device    Device    @relation(fields: [deviceId], references: [id])
  deviceId  String
  addr      String
  data      Datum[]
  sessions  Session[]
}

model Device {
  id          String          @id @default(cuid())
  author      User            @relation(fields: [authorID], references: [id])
  authorID    String
  name        String
  description String
  instances   Instance[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  parameter   Parameter[]
  netIDs      String[]
  nets        DevicesOnNets[]
  actions     Action[]
  Instrument  Instrument[]
}

model Constant {
  id       String @id @default(cuid())
  action   Action @relation(fields: [actionID], references: [id])
  actionID String
  field    Field  @relation(fields: [fieldID], references: [id])
  fieldID  String
  value    String
}

model Action {
  id            String     @id @default(cuid())
  input         Json
  output        Json
  device        Device     @relation(fields: [deviceId], references: [id])
  deviceId      String
  instruction   String?
  documentation String?
  event         Event      @relation(fields: [eventID], references: [id])
  eventID       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  constants     Constant[]
  steps         Step[]
}

model Step {
  id       String @id @default(cuid())
  order    Int
  run      Run    @relation(fields: [runID], references: [id])
  runID    String
  action   Action @relation(fields: [actionID], references: [id])
  actionID String
}

model Run {
  id          String      @id @default(cuid())
  name        String
  description String
  parameters  Parameter[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  net         Net         @relation(fields: [netID], references: [id])
  netID       String
  availabeTo  User[]
  sessions    Session[]
  steps       Step[]
  Batch       Batch[]
  Sample      Sample[]
}

model Instrument {
  id        String   @id @default(cuid())
  name      String
  device    Device   @relation(fields: [deviceId], references: [id])
  deviceId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  data      Datum[]
}

model Figure {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  analysis   Analysis @relation(fields: [analysisId], references: [id])
  analysisId String
  data       Datum[]
  path       String
}

model Analysis {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  figures     Figure[]
  data        Datum[]
}

model Datum {
  id           String      @id @default(cuid())
  instance     Instance    @relation(fields: [instanceID], references: [id])
  instanceID   String
  session      Session     @relation(fields: [sessionID], references: [id])
  sessionID    String
  value        Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  event        Event       @relation(fields: [eventId], references: [id])
  eventId      String
  Sample       Sample?     @relation(fields: [sampleId], references: [id])
  sampleId     String?
  Instrument   Instrument? @relation(fields: [instrumentId], references: [id])
  instrumentId String?
  Figure       Figure?     @relation(fields: [figureId], references: [id])
  figureId     String?
  Analysis     Analysis?   @relation(fields: [analysisId], references: [id])
  analysisId   String?
}

model Batch {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  samples   Sample[]
  run       Run?     @relation(fields: [runID], references: [id])
  runID     String?
}

model Sample {
  id        String   @id @default(cuid())
  name      String
  group     String
  user      User     @relation(fields: [userID], references: [id])
  userID    String
  batch     Batch?   @relation(fields: [batchId], references: [id])
  batchId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  data      Datum[]
  run       Run?     @relation(fields: [runID], references: [id])
  runID     String?
  params    Json
}

enum SessionState {
  NONE
  RUNNING
  PAUSED
  STOPPED
}

model Session {
  id        String       @id @default(cuid())
  user      User         @relation(fields: [userID], references: [id])
  userID    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  startedAt DateTime?
  stoppedAt DateTime?
  pausedAt  DateTime[]
  resumedAt DateTime[]
  run       Run          @relation(fields: [runID], references: [id])
  instances Instance[]
  state     SessionState @default(NONE)
  deleted   Boolean      @default(false)
  runID     String
  data      Datum[]
}
