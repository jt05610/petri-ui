datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  NONE
  ADMIN
  DEVELOPER
  REVIERWER
  USER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password        Password?
  nets            Net[]
  devices         Device[]
  deviceInstances DeviceInstance[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Net {
  id                   String                @id @default(cuid())
  name                 String
  description          String
  initialMarking       Int[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  author               User                  @relation(fields: [authorID], references: [id])
  authorID             String
  arcs                 Arc[]
  places               Place[]
  transitions          Transition[]
  parent               Net?                  @relation("NetChildren", fields: [parentID], references: [id])
  parentID             String?
  children             Net[]                 @relation("NetChildren")
  device               Device?               @relation(fields: [deviceId], references: [id])
  deviceId             String?
  placeInterfaces      PlaceInterface[]
  transitionInterfaces TransitionInterface[]
  Sequence             Sequence[]
}

model PlaceInterface {
  id        String   @id @default(cuid())
  name      String
  net       Net      @relation(fields: [netID], references: [id])
  bound     Int
  netID     String
  places    Place[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransitionInterface {
  id          String       @id @default(cuid())
  name        String
  net         Net          @relation(fields: [netID], references: [id])
  events      Event[]
  netID       String
  transitions Transition[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Place {
  id          String           @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  arcs        Arc[]
  bound       Int
  nets        Net[]
  interfaces  PlaceInterface[]
}

model Transition {
  id          String                @id @default(cuid())
  condition   String?
  description String?
  name        String
  arcs        Arc[]
  events      Event[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  nets        Net[]
  interfaces  TransitionInterface[]
}

model Arc {
  id           String     @id @default(cuid())
  net          Net        @relation(fields: [netID], references: [id])
  netID        String
  fromPlace    Boolean
  place        Place      @relation(fields: [placeID], references: [id])
  placeID      String
  transition   Transition @relation(fields: [transitionID], references: [id])
  transitionID String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Field {
  id                  String                @id @default(cuid())
  name                String
  type                String
  condition           String?
  event               Event                 @relation(fields: [eventID], references: [id])
  eventID             String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deviceEventConstant DeviceEventConstant[]
}

model Event {
  id                    String               @id @default(cuid())
  name                  String
  description           String?
  transitions           Transition[]
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  fields                Field[]
  deviceEvents          DeviceEvent[]
  deviceEventsId        String?
  placeInterfaceId      String?
  transitionInterface   TransitionInterface? @relation(fields: [transitionInterfaceId], references: [id])
  transitionInterfaceId String?
}

enum Language {
  NONE
  CPP
  GO
  JS
  PYTHON
}

model DeviceInstance {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorID], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorID  String
  language  Language
  name      String
  device    Device   @relation(fields: [deviceId], references: [id])
  deviceId  String
  addr      String
}

model Device {
  id          String           @id @default(cuid())
  author      User             @relation(fields: [authorID], references: [id])
  authorID    String
  name        String
  description String
  instances   DeviceInstance[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  nets        Net[]
  events      DeviceEvent[]
}

model DeviceEventConstant {
  id            String      @id @default(cuid())
  deviceEvent   DeviceEvent @relation(fields: [deviceEventId], references: [id])
  deviceEventId String
  field         Field       @relation(fields: [fieldID], references: [id])
  fieldID       String
  value         String
}

model DeviceEvent {
  id              String                @id @default(cuid())
  device          Device                @relation(fields: [deviceId], references: [id])
  deviceId        String
  event           Event                 @relation(fields: [eventID], references: [id])
  eventID         String
  sequenceEvent   SequenceEvent         @relation(fields: [sequenceEventId], references: [id])
  sequenceEventId String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  constants       DeviceEventConstant[]
}

model SequenceEvent {
  id         String        @id @default(cuid())
  name       String
  notes      String[]
  events     DeviceEvent[]
  sequence   Sequence      @relation(fields: [sequenceID], references: [id])
  sequenceID String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Sequence {
  id          String          @id @default(cuid())
  name        String
  description String
  events      SequenceEvent[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  net         Net             @relation(fields: [netID], references: [id])
  netID       String
}
