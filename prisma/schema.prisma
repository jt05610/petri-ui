datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  NONE
  ADMIN
  DEVELOPER
  REVIERWER
  USER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  nets     Net[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Net {
  id          String       @id @default(uuid())
  name        String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorID], references: [id])
  authorID    String
  arcs        Arc[]
  places      Place[]
  transitions Transition[]
  parent      Net?         @relation("NetChildren", fields: [parentID], references: [id])
  parentID    String?
  children    Net[]        @relation("NetChildren")
  Device      Device?      @relation(fields: [deviceId], references: [id])
  deviceId    String?
}

model Place {
  id          String   @id @default(uuid())
  name        String
  description String?
  condition   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  arcs        Arc[]
  bound       Int
  nets        Net[]
}

model Transition {
  id          String   @id @default(uuid())
  condition   String?
  description String?
  name        String
  arcs        Arc[]
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  nets        Net[]
}

model Arc {
  id           String     @id @default(uuid())
  net          Net        @relation(fields: [netID], references: [id])
  netID        String
  fromPlace    Boolean
  place        Place      @relation(fields: [placeID], references: [id])
  placeID      String
  transition   Transition @relation(fields: [transitionID], references: [id])
  transitionID String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Field {
  id        String   @id @default(uuid())
  name      String
  type      String
  condition String?
  event     Event    @relation(fields: [eventID], references: [id])
  eventID   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id             String        @id @default(uuid())
  name           String
  description    String?
  transitions    Transition[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  fields         Field[]
  DeviceEvents   DeviceEvent[]
  deviceEventsId String?
}

model Device {
  id           String        @id @default(uuid())
  name         String
  addr         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  nets         Net[]
  DeviceEvents DeviceEvent[]
}

model DeviceEvent {
  id              String         @id @default(uuid())
  device          Device         @relation(fields: [deviceId], references: [id])
  deviceId        String
  events          Event          @relation(fields: [eventID], references: [id])
  eventID         String
  sequence        SequenceEvent? @relation(fields: [sequenceEventId], references: [id])
  sequenceEventId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model SequenceEvent {
  id         String        @id @default(uuid())
  name       String
  events     DeviceEvent[]
  sequence   Sequence      @relation(fields: [sequenceID], references: [id])
  sequenceID String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Sequence {
  id        String          @id @default(uuid())
  name      String
  events    SequenceEvent[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}
